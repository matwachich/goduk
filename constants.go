package goduk

/*
#cgo CFLAGS: -std=c99 -O2 -Os -fomit-frame-pointer -fstrict-aliasing -DDUK_OPT_NO_ES6_OBJECT_SETPROTOTYPEOF -DDUK_OPT_NO_ES6_OBJECT_PROTO_PROPERTY -DDUK_OPT_NO_ES6_PROXY

#include "duktape.h"
*/
import "C"

/* --------- */
/* Constants */
/* --------- */

const VERSION = 10101
const GIT_DESCRIBE = "v1.1.1"
const INVALID_INDEX = int(C.DUK_IDX_MIN)
const VARARGS = -1
const API_ENTRY_STACK = 64

// Value types
const (
	TYPE_NONE = iota
	TYPE_UNDEFINED
	TYPE_NULL
	TYPE_BOOLEAN
	TYPE_NUMBER
	TYPE_STRING
	TYPE_OBJECT
	TYPE_BUFFER
	TYPE_POINTER
	TYPE_LIGHTFUNC
)

// Value mask types
const (
	TYPE_MASK_NONE = (1 << iota)
	TYPE_MASK_UNDEFINED
	TYPE_MASK_NULL
	TYPE_MASK_BOOLEAN
	TYPE_MASK_NUMBER
	TYPE_MASK_STRING
	TYPE_MASK_OBJECT
	TYPE_MASK_BUFFER
	TYPE_MASK_POINTER
	TYPE_MASK_LIGHTFUNC
	TYPE_MASK_THROW = (1 << 10)
)

// Coercion hints
const (
	HINT_NONE = iota
	HINT_STRING
	HINT_NUMBER
)

// Enumeration flags for Enum()
const (
	ENUM_INCLUDE_NONENUMERABLE = (1 << iota)
	ENUM_INCLUDE_INTERNAL
	ENUM_OWN_PROPERTIES_ONLY
	ENUM_ARRAY_INDICES_ONLY
	ENUM_SORT_ARRAY_INDICES
	ENUM_NO_PROXY_BEHAVIOR
)

// Compilation flags
const (
	COMPILE_EVAL = (1 << iota)
	COMPILE_FUNCTION
	COMPILE_STRICT
	COMPILE_SAFE
	COMPILE_NORESULT
	COMPILE_NOSOURCE
	COMPILE_STRLEN
)

// Flags for DefProp()
const (
	DEFPROP_WRITABLE = (1 << iota)
	DEFPROP_ENUMERABLE
	DEFPROP_CONFIGURABLE
	DEFPROP_HAVE_WRITABLE
	DEFPROP_HAVE_ENUMERABLE
	DEFPROP_HAVE_CONFIGURABLE
	DEFPROP_HAVE_VALUE
	DEFPROP_HAVE_GETTER
	DEFPROP_HAVE_SETTER
	DEFPROP_FORCE
)

const THREAD_NEW_GLOBAL_ENV = (1 << iota)
const STRING_PUSH_SAFE = (1 << iota)

// Duktape specific error codes
const (
	ERR_NONE = 0
	ERR_UNIMPLEMENTED_ERROR = (50 + iota)
	ERR_UNSUPPORTED_ERROR
	ERR_INTERNAL_ERROR
	ERR_ALLOC_ERROR
	ERR_ASSERTION_ERROR
	ERR_API_ERROR
	ERR_UNCAUGHT_ERROR
)

// Ecmascript E5 specification error codes
const (
	ERR_ERROR = (100 + iota)
	ERR_EVAL_ERROR
	ERR_RANGE_ERROR
	ERR_REFERENCE_ERROR
	ERR_SYNTAX_ERROR
	ERR_TYPE_ERROR
	ERR_URI_ERROR
)

// Return codes for C functions (shortcut for throwing an error)
const (
	RET_UNIMPLEMENTED_ERROR = (-ERR_UNIMPLEMENTED_ERROR)
	RET_UNSUPPORTED_ERROR = (-ERR_UNSUPPORTED_ERROR)
	RET_INTERNAL_ERROR = (-ERR_INTERNAL_ERROR)
	RET_ALLOC_ERROR = (-ERR_ALLOC_ERROR)
	RET_ASSERTION_ERROR = (-ERR_ASSERTION_ERROR)
	RET_API_ERROR = (-ERR_API_ERROR)
	RET_UNCAUGHT_ERROR = (-ERR_UNCAUGHT_ERROR)
	RET_ERROR = (-ERR_ERROR)
	RET_EVAL_ERROR = (-ERR_EVAL_ERROR)
	RET_RANGE_ERROR = (-ERR_RANGE_ERROR)
	RET_REFERENCE_ERROR = (-ERR_REFERENCE_ERROR)
	RET_SYNTAX_ERROR = (-ERR_SYNTAX_ERROR)
	RET_TYPE_ERROR = (-ERR_TYPE_ERROR)
	RET_URI_ERROR = (-ERR_URI_ERROR)
)

// Return codes for protected calls
const (
	EXEC_SUCCESS = iota
	EXEC_ERROR
)

// Log levels
const (
	LOG_TRACE = iota
	LOG_DEBUG
	LOG_INFO
	LOG_WARN
	LOG_ERROR
	LOG_FATAL
)

// For duk_to_buffer()
const (
	BUF_MODE_FIXED = iota
	BUF_MODE_DYNAMIC
	BUF_MODE_DONTCARE
)
